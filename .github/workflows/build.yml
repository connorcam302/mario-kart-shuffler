name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Build
      run: go build -v ./...
    
    - name: Test
      run: go test -v ./...

  build-releases:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        # Build for multiple platforms
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude combinations that don't make sense
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME="mario-kart-shuffler"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -o ${BINARY_NAME} .
        
        # Create archive
        if [ "$GOOS" = "windows" ]; then
          zip ${BINARY_NAME}-${GOOS}-${GOARCH}.zip ${BINARY_NAME}
        else
          tar -czf ${BINARY_NAME}-${GOOS}-${GOARCH}.tar.gz ${BINARY_NAME}
        fi
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./mario-kart-shuffler-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: mario-kart-shuffler-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: application/octet-stream
